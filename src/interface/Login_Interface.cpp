// #include "C:/PBL2/include/interface/Login_Interface.h"
// #include "C:/PBL2/include/main_state.h" // ƒê·ªÉ thay ƒë·ªïi tr·∫°ng th√°i
// #include "C:/PBL2/include/entities/Account.h"
// #include "C:/PBL2/include/entities/Flight.h"
// #include "C:/PBL2/include/core/AccountManager.h"
// #include "ftxui/component/component.hpp"
// #include "ftxui/component/screen_interactive.hpp"
// #include <string>

// using namespace ftxui;

// void ShowLoginScreen(AccountManager& account_manager) {
//     auto screen = ScreenInteractive::TerminalOutput();

//     // --- Bi·∫øn tr·∫°ng th√°i cho giao di·ªán ---
//     std::string user_name;
//     std::string user_password;
//     std::string login_message = "";
//     int password_mode = 0; // 0 = ·∫©n (password), 1 = hi·ªán (text)

//     // --- Components ---

//     // 1. Input cho t√™n ƒëƒÉng nh·∫≠p
//     Component user_name_input = Input(&user_name, "Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p");

//     // 2. Hai phi√™n b·∫£n c·ªßa Input m·∫≠t kh·∫©u (·∫©n v√† hi·ªán)
//     Component password_input_hidden = Input(&user_password, "Nh·∫≠p m·∫≠t kh·∫©u", {.password = true});
//     Component password_input_visible = Input(&user_password, "Nh·∫≠p m·∫≠t kh·∫©u", {.password = false});

//     // 3. Container::Tab ƒë·ªÉ chuy·ªÉn ƒë·ªïi gi·ªØa hai phi√™n b·∫£n Input tr√™n
//     auto password_container = Container::Tab(
//         {
//             password_input_hidden,  // Trang 0
//             password_input_visible, // Trang 1
//         },
//         &password_mode // Bi·∫øn ƒëi·ªÅu khi·ªÉn vi·ªác hi·ªÉn th·ªã trang n√†o
//     );

//     // 4. N√∫t "Hi·ªán/·∫®n" ƒë·ªÉ thay ƒë·ªïi gi√° tr·ªã c·ªßa password_mode
//     auto eye_button = Button("üëÅ ", [&] {
//         password_mode = 1 - password_mode; // L·∫≠t gi·ªØa 0 v√† 1
//     });

//     // 5. N√∫t ƒëƒÉng nh·∫≠p
//     auto login_button = Button("ƒêƒÉng nh·∫≠p", [&] {
//         bool log = account_manager.login(user_name,user_password);

//         if (log) {
//             login_message = "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!";
//             if (account_manager.getCurrentUser()->getRole() == Role::Admin) {
//                 current_screen = ApplicationScreen::AdminMenu;
//             } else {
//                 current_screen = ApplicationScreen::AgentMenu;
//             }
//             screen.Exit();
//         } else {
//             login_message = "T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c!";
//         }
//     });

//     // Container ch√≠nh ch·ª©a t·∫•t c·∫£ c√°c component c√≥ th·ªÉ t∆∞∆°ng t√°c (ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng b·∫±ng b√†n ph√≠m)
//     auto main_container = Container::Vertical({
//         user_name_input,
//         password_container,
//         eye_button,
//         login_button,
//     });
    
//     // Renderer ƒë·ªÉ v·∫Ω giao di·ªán
//     auto renderer = Renderer(main_container, [&] {
//         return vbox({
//             text("H·ªÜ TH·ªêNG QU·∫¢N L√ù B√ÅN V√â M√ÅY BAY") | bold | center,
//             separator(),
//             window(text("Th√¥ng tin ƒëƒÉng nh·∫≠p"),
//                 // D√πng gridbox ƒë·ªÉ cƒÉn ch·ªânh c√°c d√≤ng cho ƒë·∫πp
//                 gridbox({
//                     {text(" T√™n ƒëƒÉng nh·∫≠p: ") | align_right, user_name_input->Render() | size(WIDTH, EQUAL, 22)},
//                     {text(" M·∫≠t kh·∫©u:      ") | align_right, hbox({
//                         // ƒê·∫∑t Input v√† n√∫t Hi·ªán/·∫®n tr√™n c√πng m·ªôt d√≤ng
//                         hbox(password_container->Render()) | size(WIDTH, EQUAL, 20), // |flex
//                         separatorEmpty(),
//                         eye_button->Render()
//                     })},
//                 })
//             ),
//             separator(),
//             login_button->Render() | center,
//             separator(),
//             text(login_message) | center | (login_message.find("th√†nh c√¥ng") != std::string::npos ? color(Color::Green) : color(Color::Red))
//         }) | border | center;
//     });

//     screen.Loop(renderer);
// }
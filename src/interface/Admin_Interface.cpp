#include <iostream>
#include <string>
#include <vector>
#include <memory>

#include "C:/PBL2/include/core/AccountManager.h"
#include "C:/PBL2/include/main_state.h"
#include "C:/PBL2/include/core/FlightManager.h"
#include "C:/PBL2/include/entities/Flight.h"
#include "C:/PBL2/include/DSA/DynamicArray.h" 
#include "ftxui/component/component.hpp"
#include "ftxui/component/screen_interactive.hpp"
#include "ftxui/dom/elements.hpp"
// #include <ftxui/dom/scroll_indicator.hpp>

using namespace ftxui;

FlightManager flight_manager("C:/PBL2/data/flights.txt","C:/PBL2/data/flight_instances.txt");

class FlightList {
public:
    int scroll_position = 0;
    int visible_rows = 15;  // s·ªë d√≤ng hi·ªÉn th·ªã
    std::vector<std::vector<std::string>> flight_data;
    Component container;

    FlightList() {
        LoadData();

        auto table_renderer = Renderer([&] {
            Elements rows;
            int total = flight_data.size();
            int end_index = std::min(scroll_position + visible_rows, total);

            // --- Ti√™u ƒë·ªÅ b·∫£ng ---
            auto header = hbox({
                text("ID tuy·∫øn bay") | bold | center | size(WIDTH, EQUAL, 15),
                separator(),
                text("M√£ tuy·∫øn bay") | bold | center | size(WIDTH, EQUAL, 15),
                separator(),
                text("H√£ng bay") | bold | center | size(WIDTH, EQUAL, 25),
                separator(),
                text("S√¢n bay ƒëi") | bold | center | size(WIDTH, EQUAL, 10),
                separator(),
                text("S√¢n bay ƒë·∫øn") | bold | center | size(WIDTH, EQUAL, 11),
            });

            rows.push_back(header);
            rows.push_back(separator());

            // --- D√≤ng d·ªØ li·ªáu ---
            for (int i = scroll_position; i < end_index; i++) {
                const auto& f = flight_data[i];
                rows.push_back(hbox({
                    text(f[0]) | center | size(WIDTH, EQUAL, 15),
                    text(f[1]) | center | size(WIDTH, EQUAL, 18),
                    text(f[2]) | center | size(WIDTH, EQUAL, 25),
                    text(f[3]) | center | size(WIDTH, EQUAL, 11),
                    text(f[4]) | center | size(WIDTH, EQUAL, 10),
                }));
            }

            // --- Thanh tr·∫°ng th√°i ---
            rows.push_back(separator());
            rows.push_back(text("D√πng chu·ªôt ƒë·ªÉ cu·ªôn ‚Äî T·ªïng s·ªë chuy·∫øn: " + std::to_string(total))
                | dim | center);

            return vbox({
                text("üìã DANH S√ÅCH TUY·∫æN BAY") | bold | center,
                vbox(std::move(rows)) | border | size(HEIGHT, LESS_THAN, 25),
            });
        });

        // --- B·∫Øt s·ª± ki·ªán cu·ªôn ---
        container = CatchEvent(table_renderer, [&](Event event) {
            int total = flight_data.size();

            // --- Cu·ªôn b·∫±ng ph√≠m ---
            if (event == Event::ArrowDown || event == Event::Character('s')) {
                if (scroll_position + visible_rows < total)
                    scroll_position++;
                return true;
            }
            if (event == Event::ArrowUp || event == Event::Character('w')) {
                if (scroll_position > 0)
                    scroll_position--;
                return true;
            }

            // --- Cu·ªôn b·∫±ng chu·ªôt ---
            if (event.is_mouse()) {
                if (event.mouse().button == Mouse::WheelDown) {
                    if (scroll_position + visible_rows < total)
                        scroll_position++;
                    return true;
                }
                if (event.mouse().button == Mouse::WheelUp) {
                    if (scroll_position > 0)
                        scroll_position--;
                    return true;
                }
            }
            return false;
        });
    }

    Element Render() { return container->Render(); }

private:
    void LoadData() {
        flight_data.clear();
        auto flights = flight_manager.getAllFlights();

        // --- Duy·ªát m·∫£ng flights ƒë√∫ng c√°ch ---
        for (int i = 0; i < flights.size(); i++) {
            Flight* f = flights[i];
            if (!f) continue;

            std::stringstream ss(f->toRecordLine());
            std::string col;
            std::vector<std::string> cols;

            while (std::getline(ss, col, '|'))
                cols.push_back(col);

            if (cols.size() < 5)
                cols.resize(5, "");

            flight_data.push_back(cols);
        }
    }
};

// --- Giao di·ªán cho m√†n h√¨nh "Th√™m tuy·∫øn bay" ---
class AddFlightScreen {
public:
    // Tr·∫°ng th√°i (d·ªØ li·ªáu) c·ªßa m√†n h√¨nh n√†y
    std::string flightID;
    std::string departureIso;
    std::string arrivalIso;
    std::string economyTotal;
    std::string thong_bao = "";

    // Component ch√≠nh ch·ª©a c√°c th√†nh ph·∫ßn con
    Component container;

    AddFlightScreen() {
        // T·∫°o c√°c component con
        Component input_flightID = Input(&flightID, "(VD:VN123)");
        Component input_departureIso = Input(&departureIso, "(VD: Vietnam Airline)");
        Component input_arrivalIso = Input(&arrivalIso, "(VD: HAN)");
        Component input_economyTotal = Input(&economyTotal, "(VD: DAN)");

        auto them_button = Button("Th√™m ", [&] {
            // Logic khi nh·∫•n n√∫t "Th√™m"
            bool new_flight = flight_manager.createNewFlight(flightID,departureIso,arrivalIso,economyTotal);
            if (new_flight){
                if (flight_manager.saveFlightsToFiles("C:/PBL2/data/flights.txt") == 1) 
                    thong_bao = "Th√™m th√†nh c√¥ng tuy·∫øn bay " + flightID + "|" + arrivalIso + " - " + economyTotal +"!";
                else
                    thong_bao = "X·∫£y ra l·ªói trong qu√° tr√¨nh th√™m tuy·∫øn bay!";
                // X√≥a d·ªØ li·ªáu c≈©
                flightID = "";
                departureIso = "";
                arrivalIso = "";
                economyTotal = "";
            }
            else
                thong_bao = "Kh√¥ng th·ªÉ th√™m tuy·∫øn bay tr·ªëng ho·∫∑c ƒë√£ t·ªìn t·∫°i!";
            
        });

        container = Container::Vertical({
            input_flightID,
            input_departureIso,
            input_arrivalIso,
            input_economyTotal,
            them_button
        });
    }

    // H√†m v·∫Ω giao di·ªán cho m√†n h√¨nh n√†y
    Element Render() {
        return vbox({
            // B·∫£ng nh·∫≠p li·ªáu
            gridbox({
                {text(" M√£ tuy·∫øn bay ") | bold |center,separator(), text(" H√£ng bay ") | bold |center,separator(), text(" S√¢n bay ƒëi ") | bold |center,separator(), text(" S√¢n bay ƒë·∫øn ") | bold |center},
                {
                    // L·∫•y component con t·ª´ container ƒë·ªÉ render
                    container->ChildAt(0)->Render() |center ,// input_flightID
                    separator(),
                    container->ChildAt(1)->Render() |center, // input_departureIso
                    separator(),
                    container->ChildAt(2)->Render() |center, // input_arrivalIso
                    separator(),
                    container->ChildAt(3)->Render() |center, // input_economyTotal
                },
            }) | border | size(WIDTH,EQUAL,66) | center,
            // N√∫t "Th√™m"
            container->ChildAt(4)->Render() | center, // them_button
            separator(),
            // Th√¥ng b√°o
            text(thong_bao) | color(Color::Green) | center
        });
    }
};

// --- Giao di·ªán cho m√†n h√¨nh "Th√™m chuy·∫øn bay" ---
class AddFlightInstanceScreen {
public:
    // Tr·∫°ng th√°i (d·ªØ li·ªáu) c·ªßa m√†n h√¨nh n√†y
    std::string flightID;
    std::string departureIso;
    std::string arrivalIso;
    std::string economyTotal;
    std::string businessTotal;
    std::string fareEconomy;
    std::string fareBusiness;
    std::string thong_bao = "";

    // Component ch√≠nh ch·ª©a c√°c th√†nh ph·∫ßn con
    Component container;

    AddFlightInstanceScreen() {
        // T·∫°o c√°c component con
        Component input_flightID = Input(&flightID, "(VD: 1)");
        Component input_departureIso = Input(&departureIso, "(YYYY-MM-DDTHH:MM:SSZ)");
        Component input_arrivalIso = Input(&arrivalIso, "(YYYY-MM-DDTHH:MM:SSZ)");
        Component input_economyTotal = Input(&economyTotal, "(VD: 120)");
        Component input_businessTotal = Input(&businessTotal, "(VD: 40)");
        Component input_fareEconomy = Input(&fareEconomy, "(VD: 1500000)");
        Component input_fareBusiness = Input(&fareBusiness, "(VD: 3500000)");

        auto them_button = Button("Th√™m ", [&] {
            // Logic khi nh·∫•n n√∫t "Th√™m"
            if (economyTotal.empty() || businessTotal.empty() || fareEconomy.empty() || fareBusiness.empty())
                thong_bao = "Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ d·ªØ li·ªáu tr·ªëng!";
            else{
                bool new_flight_instance = flight_manager.createNewInstance(flightID,
                                                                        departureIso,
                                                                        arrivalIso,
                                                                        std::stoi(economyTotal),
                                                                        std::stoi(businessTotal),
                                                                        std::stoi(fareEconomy),
                                                                        std::stoi(fareBusiness));

                if (new_flight_instance){
                    if (flight_manager.saveInstancesToFiles("C:/PBL2/data/flight_instances.txt"))
                        thong_bao = "Th√™m th√†nh c√¥ng chuy·∫øn bay " + flightID + " !";
                    else 
                        thong_bao = "X·∫£y ra l·ªói trong qu√° tr√¨nh th√™m chuy·∫øn bay!";
                    // X√≥a d·ªØ li·ªáu c≈©
                    flightID = "";
                    departureIso = "";
                    arrivalIso = "";
                    economyTotal = "";
                    businessTotal = "";
                    fareEconomy = "";
                    fareBusiness = "";
                }
                else
                    thong_bao = "Kh√¥ng th·ªÉ th√™m chuy·∫øn bay tr·ªëng ho·∫∑c ƒë√£ t·ªìn t·∫°i!";
            }
            
        });

        container = Container::Vertical({
            input_flightID,
            input_departureIso,
            input_arrivalIso,
            input_economyTotal,
            input_businessTotal,
            input_fareEconomy,
            input_fareBusiness,
            them_button
        });
    }

    // H√†m v·∫Ω giao di·ªán cho m√†n h√¨nh n√†y
    Element Render() {
        return vbox({
            // B·∫£ng nh·∫≠p li·ªáu
            gridbox({
                {text(" ID chuy·∫øn bay ") | bold | center,separator(), text(" Gi·ªù kh·ªüi h√†nh ") | bold | center,separator(), text(" Gi·ªù h·∫° c√°nh ") | bold | center,separator(), 
                text(" S·ªë gh·∫ø ph·ªï th√¥ng ") | bold | center, separator(),text(" S·ªë gh·∫ø th∆∞∆°ng gia ") | bold | center,separator(), text(" Gi√° v√© ph·ªï th√¥ng ") | bold | center, separator(),
                text(" Gi√° v√© th∆∞∆°ng gia ") | bold | center},
                {
                    // L·∫•y component con t·ª´ container ƒë·ªÉ render
                    container->ChildAt(0)->Render() | center, // input_flightID
                    separator(),
                    container->ChildAt(1)->Render() | center, // input_departureIso
                    separator(),
                    container->ChildAt(2)->Render() | center, // input_arrivalIso
                    separator(),
                    container->ChildAt(3)->Render() | center, // input_economyTotal
                    separator(),
                    container->ChildAt(4)->Render() | center, // input_businessTotal
                    separator(),
                    container->ChildAt(5)->Render() | center, // input_fareEconomy
                    separator(),
                    container->ChildAt(6)->Render() | center, // input_faceBusiness
                },
            }) | border | size(WIDTH,EQUAL,140) | center, // flex
            separatorEmpty(),
            // N√∫t "Th√™m"
            container->ChildAt(7)->Render() | center, // them_button
            separator(),
            // Th√¥ng b√°o
            text(thong_bao) | color(Color::Green) | center 
        });
    }
};


void ShowAdminMenu(AccountManager& account_manager){
    auto screen = ScreenInteractive::TerminalOutput();

    // --- BI·∫æN TR·∫†NG TH√ÅI (STATE) ---
    int selected_tab = 0;
    std::string user_name = " üë§" + account_manager.getCurrentUser()->getFullName() + " - Admin ";
    
    std::vector<std::string> menu_tabs = {
        "Danh s√°ch tuy·∫øn bay",
        "Danh s√°ch ƒë·∫°i l√Ω",
        "Th√™m tuy·∫øn bay",
        "Th√™m chuy·∫øn bay",
        "X√≥a tuy·∫øn bay",
        "X√≥a chuy·∫øn bay",
        "Th√™m ƒë·∫°i l√Ω",
    };

    // --- C√ÅC COMPONENT T∆Ø∆†NG T√ÅC ---
    FlightList flight_list;
    AddFlightScreen add_flight_screen;
    AddFlightInstanceScreen add_flight_instance_screen;

    // Component Menu, n√≥ s·∫Ω thay ƒë·ªïi gi√° tr·ªã c·ªßa `selected_tab`
    auto menu = Menu(&menu_tabs, &selected_tab, MenuOption::Vertical());

    // Container::Tab s·∫Ω qu·∫£n l√Ω vi·ªác component con n√†o ƒëang "active".
    // N√≥ c≈©ng ƒë∆∞·ª£c ƒëi·ªÅu khi·ªÉn b·ªüi c√πng m·ªôt bi·∫øn `selected_tab`.
    auto tab_container = Container::Tab(
        {
            flight_list.container, // Tab 0: Danh s√°ch tuy·∫øn bay
            Container::Vertical({}), // Tab 1: Danh s√°ch ƒë·∫°i l√Ω
            add_flight_screen.container,          // Tab 2: Th√™m tuy·∫øn bay
            add_flight_instance_screen.container, // Tab 3: Th√™m chuy·∫øn bay
            Container::Vertical({}), // Tab 4: X√≥a tuy·∫øn bay
            Container::Vertical({}), // Tab 5: X√≥a chuy·∫øn bay
            Container::Vertical({}), // Tab 6: Th√™m ƒë·∫°i l√Ω
        },
        &selected_tab // Bi·∫øn n√†y ƒëi·ªÅu khi·ªÉn c·∫£ Menu v√† Tab container
    );

    auto logout_button = Button("ƒêƒÉng xu·∫•t", [&]{
        account_manager.logout();
        current_screen = ApplicationScreen::Login;
        screen.Exit();
    });

    // Container ch√≠nh ch·ª©a menu v√† tab_container ƒë·ªÉ ch√∫ng c√≥ th·ªÉ
    // ph·ªëi h·ª£p v·ªõi nhau.
    auto main_container = Container::Horizontal({
        menu,
        tab_container,
        logout_button,
    });

    // --- H·ªåA Sƒ® (RENDERER) ---
    // Ph·∫ßn Renderer v·∫´n gi·ªØ nguy√™n logic hi·ªÉn th·ªã d·ª±a tr√™n `selected_tab`.
    auto main_renderer = Renderer(main_container, [&] {
        // 1. Menu b√™n tr√°i
        auto left_pane = vbox({
            menu->Render(),
            separatorEmpty() | flex,
            logout_button->Render()
        }) | size(WIDTH, EQUAL, 30) | size(HEIGHT, EQUAL, 40) | border;

        // 2. N·ªôi dung b√™n ph·∫£i
        Element right_content;
        switch (selected_tab) {
            case 0: right_content = flight_list.Render() | center; break;
            case 1: right_content = text("Giao di·ªán Danh s√°ch ƒë·∫°i l√Ω") | center; break;
            case 2: right_content = add_flight_screen.Render(); break;
            case 3: right_content = add_flight_instance_screen.Render(); break;
            case 4: right_content = text("Giao di·ªán x√≥a tuy·∫øn bay") | center; break;
            case 5: right_content = text("Giao di·ªán x√≥a chuy·∫øn bay") | center; break;
            case 6: right_content = text("Giao di·ªán th√™m ƒë·∫°i l√Ω") | center; break;
        }

        auto right_pane = vbox({
            vbox(right_content) | flex, // D√πng vbox() ƒë·ªÉ c·ªë ƒë·ªãnh layout
            separator(),
        }) | border;

        // 3. Gh√©p 2 c·ªôt l·∫°i v·ªõi nhau
        auto layout = hbox({
            left_pane,
            right_pane | flex,
        });

        // 4. ƒê·∫∑t to√†n b·ªô layout v√†o m·ªôt c·ª≠a s·ªï l·ªõn
        return window(text(user_name), layout);
    });

    screen.Loop(main_renderer);
}

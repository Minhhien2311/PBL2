#include <iostream>
#include <string>
#include <vector>
#include <memory>

#include "C:/PBL2/include/core/AccountManager.h"
#include "C:/PBL2/include/main_state.h"
#include "C:/PBL2/include/core/FlightManager.h"
#include "ftxui/component/component.hpp"
#include "ftxui/component/screen_interactive.hpp"
#include "ftxui/dom/elements.hpp"

using namespace ftxui;

FlightManager flight_manager("C:/PBL2/data/flights.txt","C:/PBL2/data/flight_instances.txt");

// --- Giao di·ªán cho m√†n h√¨nh "Th√™m tuy·∫øn bay" ---
class AddFlightScreen {
public:
    // Tr·∫°ng th√°i (d·ªØ li·ªáu) c·ªßa m√†n h√¨nh n√†y
    std::string flight_number;
    std::string airline;
    std::string departure_airport;
    std::string arrival_airport;
    std::string thong_bao = "";

    // Component ch√≠nh ch·ª©a c√°c th√†nh ph·∫ßn con
    Component container;

    AddFlightScreen() {
        // T·∫°o c√°c component con
        Component input_flight_number = Input(&flight_number, "Nh·∫≠p m√£ chuy·∫øn bay (VD:VN123)");
        Component input_airline = Input(&airline, "Nh·∫≠p h√£ng (VD: Vietnam Airline)");
        Component input_departure_airport = Input(&departure_airport, "Nh·∫≠p n∆°i ƒëi (VD: HAN)");
        Component input_arrival_airport = Input(&arrival_airport, "Nh·∫≠p n∆°i ƒë·∫øn (VD: DAN)");

        auto them_button = Button("Th√™m", [&] {
            // Logic khi nh·∫•n n√∫t "Th√™m"
            bool new_flight = flight_manager.createNewFlight(flight_number,airline,departure_airport,arrival_airport);

            if (new_flight){
                thong_bao = "Th√™m th√†nh c√¥ng tuy·∫øn bay " + flight_number + "|" + departure_airport + " - " + arrival_airport +"!";
                // X√≥a d·ªØ li·ªáu c≈©
                flight_number = "";
                airline = "";
                departure_airport = "";
                arrival_airport = "";
            }
            else
                thong_bao = "Kh√¥ng th·ªÉ th√™m tuy·∫øn bay tr·ªëng ho·∫∑c ƒë√£ t·ªìn t·∫°i!";
            
        });

        container = Container::Vertical({
            input_flight_number,
            input_airline,
            input_departure_airport,
            input_arrival_airport,
            them_button
        });
    }

    // H√†m v·∫Ω giao di·ªán cho m√†n h√¨nh n√†y
    Element Render() {
        return vbox({
            // B·∫£ng nh·∫≠p li·ªáu
            gridbox({
                {text(" M√£ chuy·∫øn bay ") | bold,separator(), text(" H√£ng bay ") | bold,separator(), text(" S√¢n bay ƒëi ") | bold,separator(), text(" S√¢n bay ƒë·∫øn ") | bold},
                {
                    // L·∫•y component con t·ª´ container ƒë·ªÉ render
                    container->ChildAt(0)->Render(), // input_flight_number
                    separator(),
                    container->ChildAt(1)->Render(), // input_airline
                    separator(),
                    container->ChildAt(2)->Render(), // input_departure_airport
                    separator(),
                    container->ChildAt(3)->Render(), // input_arrival_airport
                },
            }) | border | flex,
            separator(),
            // N√∫t "Th√™m"
            container->ChildAt(4)->Render() | center, // them_button
            separator(),
            // Th√¥ng b√°o
            text(thong_bao) | color(Color::Green) | center
        });
    }
};

// --- Giao di·ªán cho m√†n h√¨nh "Th√™m chuy·∫øn bay" ---
class AddFlightInstacneScreen {
public:
    // Tr·∫°ng th√°i (d·ªØ li·ªáu) c·ªßa m√†n h√¨nh n√†y
    std::string flight_number;
    std::string airline;
    std::string departure_airport;
    std::string arrival_airport;
    std::string thong_bao = "";

    // Component ch√≠nh ch·ª©a c√°c th√†nh ph·∫ßn con
    Component container;

    AddFlightScreen() {
        // T·∫°o c√°c component con
        Component input_flight_number = Input(&flight_number, "Nh·∫≠p m√£ chuy·∫øn bay (VD:VN123)");
        Component input_airline = Input(&airline, "Nh·∫≠p h√£ng (VD: Vietnam Airline)");
        Component input_departure_airport = Input(&departure_airport, "Nh·∫≠p n∆°i ƒëi (VD: HAN)");
        Component input_arrival_airport = Input(&arrival_airport, "Nh·∫≠p n∆°i ƒë·∫øn (VD: DAN)");

        auto them_button = Button("Th√™m", [&] {
            // Logic khi nh·∫•n n√∫t "Th√™m"
            bool new_flight = flight_manager.createNewFlight(flight_number,airline,departure_airport,arrival_airport);

            if (new_flight){
                thong_bao = "Th√™m th√†nh c√¥ng tuy·∫øn bay " + flight_number + "|" + departure_airport + " - " + arrival_airport +"!";
                // X√≥a d·ªØ li·ªáu c≈©
                flight_number = "";
                airline = "";
                departure_airport = "";
                arrival_airport = "";
            }
            else
                thong_bao = "Kh√¥ng th·ªÉ th√™m tuy·∫øn bay tr·ªëng ho·∫∑c ƒë√£ t·ªìn t·∫°i!";
            
        });

        container = Container::Vertical({
            input_flight_number,
            input_airline,
            input_departure_airport,
            input_arrival_airport,
            them_button
        });
    }

    // H√†m v·∫Ω giao di·ªán cho m√†n h√¨nh n√†y
    Element Render() {
        return vbox({
            // B·∫£ng nh·∫≠p li·ªáu
            gridbox({
                {text(" M√£ chuy·∫øn bay ") | bold,separator(), text(" H√£ng bay ") | bold,separator(), text(" S√¢n bay ƒëi ") | bold,separator(), text(" S√¢n bay ƒë·∫øn ") | bold},
                {
                    // L·∫•y component con t·ª´ container ƒë·ªÉ render
                    container->ChildAt(0)->Render(), // input_flight_number
                    separator(),
                    container->ChildAt(1)->Render(), // input_airline
                    separator(),
                    container->ChildAt(2)->Render(), // input_departure_airport
                    separator(),
                    container->ChildAt(3)->Render(), // input_arrival_airport
                },
            }) | border | flex,
            separator(),
            // N√∫t "Th√™m"
            container->ChildAt(4)->Render() | center, // them_button
            separator(),
            // Th√¥ng b√°o
            text(thong_bao) | color(Color::Green) | center
        });
    }
};


void ShowAdminMenu(){
    auto screen = ScreenInteractive::TerminalOutput();
    AccountManager account_manager("C:/PBL2/data/admins.txt","C:/PBL2:/data/agents.txt");

    // --- BI·∫æN TR·∫†NG TH√ÅI (STATE) ---
    int selected_tab = 0; // 0: Th√™m chuy·∫øn bay, 1: X√≥a chuy·∫øn bay, ...
    std::string user_name = " üë§" + account_manager.getCurrentUser()->getFullName() + " - Admin ";
    // int total_flights = 6;

    // Danh s√°ch c√°c tab trong menu
    std::vector<std::string> menu_tabs = {
        "Danh s√°ch chuy·∫øn bay",
        "Danh s√°ch ƒë·∫°i l√Ω",
        "Th√™m tuy·∫øn bay",
        "X√≥a tuy·∫øn bay",
        "Th√™m Agent",
    };

    // --- C√ÅC COMPONENT T∆Ø∆†NG T√ÅC ---
    // T·∫°o component cho m√†n h√¨nh "Th√™m chuy·∫øn bay"
    AddFlightScreen add_flight_screen;
    // (Sau n√†y s·∫Ω t·∫°o c√°c screen kh√°c t∆∞∆°ng t·ª±)

    // Component Menu ƒë·ªÉ qu·∫£n l√Ω c√°c n√∫t ch·ª©c nƒÉng
    auto menu = Menu(&menu_tabs, &selected_tab, MenuOption::Vertical());

    // Component n√∫t ƒêƒÉng xu·∫•t
    auto logout_button = Button("ƒêƒÉng xu·∫•t", [&]{
        current_screen = ApplicationScreen::Login;
    });

    auto exit_button = Button("Tho√°t", screen.ExitLoopClosure());

    // Container ch√≠nh gom nh√≥m t·∫•t c·∫£ c√°c ph·∫ßn c√≥ th·ªÉ t∆∞∆°ng t√°c
    // ƒêi·ªÅu n√†y quan tr·ªçng ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng b·∫±ng ph√≠m Tab
    auto main_container = Container::Vertical({
        menu,
        add_flight_screen.container, // Th√™m container c·ªßa m√†n h√¨nh con v√†o
        logout_button,
        exit_button,
    });


    // --- H·ªåA Sƒ® (RENDERER) ---
    // ƒê√¢y l√† ph·∫ßn quan tr·ªçng nh·∫•t, n√≥ s·∫Ω v·∫Ω to√†n b·ªô giao di·ªán d·ª±a tr√™n
    // c√°c bi·∫øn tr·∫°ng th√°i ·ªü tr√™n.
    auto main_renderer = Renderer(main_container, [&] {
        // 1. Menu b√™n tr√°i
        auto left_pane = vbox({
            menu->Render(),
            separatorEmpty() | flex, // D√πng flex ƒë·ªÉ ƒë·∫©y n√∫t ƒêƒÉng xu·∫•t xu·ªëng d∆∞·ªõi
            exit_button->Render(),
            logout_button->Render()
        }) | size(WIDTH, EQUAL, 30) | size(HEIGHT, EQUAL, 20) | border; // C·ªë ƒë·ªãnh chi·ªÅu r·ªông c·ªßa menu

        // 2. N·ªôi dung b√™n ph·∫£i
        Element right_content;
        // D·ª±a v√†o `selected_tab` ƒë·ªÉ quy·∫øt ƒë·ªãnh v·∫Ω g√¨
        switch (selected_tab) {
            case 0:
                right_content = text("Giao di·ªán Danh s√°ch chuy√©n bay") | center;
                break;
            case 1:
                right_content = text("Giao di·ªán Danh s√°ch ƒë·∫°i l√Ω") | center;
                break;
            case 2:
                right_content = add_flight_screen.Render();
                break;
            case 3:
                right_content = text("Giao di·ªán X√≥a chuy·∫øn bay") | center;
                break;
            case 4:
                right_content = text("Giao di·ªán th√™m ƒë·∫°i l√Ω") | center;
                break;
        }

        auto right_pane = vbox({
            right_content | flex, // D√πng flex ƒë·ªÉ ƒë·∫©y footer xu·ªëng d∆∞·ªõi
            separator(),
            // text("S·ªë chuy·∫øn bay hi·ªán c√≥ : " + std::to_string(total_flights))
        }) | border;

        // 3. Gh√©p 2 c·ªôt l·∫°i v·ªõi nhau
        auto layout = hbox({
            left_pane,
            right_pane | flex// D√πng flex ƒë·ªÉ c·ªôt ph·∫£i l·∫•p ƒë·∫ßy kh√¥ng gian c√≤n l·∫°i
        });

        // 4. ƒê·∫∑t to√†n b·ªô layout v√†o m·ªôt c·ª≠a s·ªï l·ªõn
        return window(text(user_name), layout) | size(WIDTH, EQUAL, 130);
    });

    screen.Loop(main_renderer);

}